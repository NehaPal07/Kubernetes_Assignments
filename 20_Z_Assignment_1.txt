Learning Objectives:-
Create the `auth-svc` service
Create the `data-svc` service


Problem Statement:-
Your company has just deployed two components of a web application to a Kubernetes cluster, using deployments with multiple replicas.
They need a way to provide dynamic network access to these replicas so that there will be uninterrupted access to the components whenever 
replicas are created, removed, and replaced. One deployment is called auth-deployment, an authentication provider that needs to be accessible 
from outside the cluster. The other is called data-deployment, and it is a component designed to be accessed only by other pods within the cluster.

The team wants you to create two services to expose these two components:-

auth-deployment.yaml
------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP




data-deployment.yaml
-----------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: data-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: data
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: data
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP


Examine the two deployments, and create two services that meet the following criteria:

auth-svc.yaml
--------------

The service name is auth-svc.
The service exposes the pod replicas managed by the deployment named auth-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is NodePort.


data-svc.yaml
----------------
The service name is data-svc.
The service exposes the pod replicas managed by the deployment named data-deployment.
The service listens on port 8080 and its targetPort matches the port exposed by the pods.
The service type is ClusterIP.

Note: All work should be done in the default namespace.

Solution:

vi auth-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: auth-svc
  labels:
    app: auth
spec:
  type: NodePort
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: auth-app
	
kubectl create -f auth-deployment.yml
deployment.apps/auth-deployment created
service/auth-svc created
----------------------------------------------------------

ubuntu@master-node:~$ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.102.235.238   <none>        8080:31018/TCP   4m59s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          27h

--------------------------------------------------------------------------------


vi data-deployment.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: data
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: data
    spec:
      containers:
      - image: nginx
        name: nginx
        ports:
        - containerPort: 80
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: data-svc
  labels:
    app: data
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 80
  selector:
    app: data


kubectl create -f data-deployment.yml
deployment.apps/data-deployment created
service/data-svc created





-----------------------------------------------------------------------------------

ubuntu@master-node:~$ kubectl get svc
NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
auth-svc     NodePort    10.102.235.238   <none>        8080:31018/TCP   10m
data-svc     ClusterIP   10.111.230.40    <none>        8080/TCP         27s
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP          27h

-----------------------------------------------------------------------------------
ubuntu@master-node:~$ kubectl get deployments
NAME               READY   UP-TO-DATE   AVAILABLE   AGE
auth-deployment    2/2     2            2           6m23s
candy-deployment   2/2     2            2           50m
data-deployment    3/3     3            3           51s
------------------------------------------------------------------------------------
ubuntu@master-node:~$ curl http://10.111.230.40:8080
curl: (7) Failed to connect to 10.111.230.40 port 8080: Connection timed out




